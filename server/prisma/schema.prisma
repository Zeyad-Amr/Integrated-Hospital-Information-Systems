// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id                 String       @id @default(uuid())
  firstName          String
  secondName         String
  thirdName          String
  fourthName         String
  SSN                String       @unique
  verificationMethod IdentityEnum
  gender             GenderEnum
  birthDate          DateTime     @db.Date
  phone              String?      @unique
  email              String?      @unique
  governate          String
  address            String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee        Employee?
  patientVisits   Visit[]   @relation("visitPatient")
  companionVisits Visit[]   @relation("visitCompanion")
}

model Employee {
  id   String   @id @default(uuid())
  role RoleEnum
  // we should make table for shifts 
  // shiftStart DateTime
  // shiftEnd   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User?
  person            Person     @relation(fields: [personID], references: [id])
  personID          String     @unique
  createdByEmployee Employee?  @relation("CreatedBy", fields: [createdById], references: [id])
  createdById       String?
  createdEmployees  Employee[] @relation("CreatedBy")
  visit             Visit[]
}

model User {
  username String @id
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String   @unique
}

model Visit {
  id             String       @id @default(uuid())
  code           String?      @unique
  sequenceNumber Int
  kinship        KinshipEnum?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // it has to be commented till the emplopyee api created
  creator     Employee  @relation(fields: [creatorId], references: [id])
  creatorId   String
  patient     Person?   @relation("visitPatient", fields: [patientId], references: [id])
  patientId   String?
  companion   Person?   @relation("visitCompanion", fields: [companionId], references: [id])
  companionId String?
  incident    Incident? @relation(fields: [incidentId], references: [id])
  incidentId  String?
}

model Incident {
  id               String @id @default(uuid())
  description      String
  numberOfPatients Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  visits Visit[]
}

enum IdentityEnum {
  NATIONALIDCARD
  PASSPORT
}

enum GenderEnum {
  MALE
  FEMALE
}

enum KinshipEnum {
  BROTHER
  SISTER
  FATHER
  MOTHER
  COUSIN
  AUNT
  OTHER
}

enum RoleEnum {
  ADMIN
  RECEPTIONIST
  DOCTOR
  NURSE
}
