// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id                 String       @id @default(uuid())
  firstName          String
  secondName         String
  thirdName          String
  fourthName         String
  SSN                String?      @unique
  verificationMethod IdentityEnum?
  gender             GenderEnum
  birthDate          DateTime?     @db.Date
  phone              String?      @unique
  email              String?      @unique
  governate          String?
  address            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee              Employee?
  patientVisits         Visit[]                 @relation("visitPatient")
  companionVisits       Visit[]                 @relation("visitCompanion")
  CompanionsOnIncidents CompanionsOnIncidents[]
}

model Employee {
  id    String    @id @default(uuid())
  role  RoleEnum
  shift ShiftEnum

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User?

  person   Person @relation(fields: [personID], references: [id])
  personID String @unique

  createdByEmployee Employee?  @relation("CreatedBy", fields: [createdById], references: [id])
  createdById       String?
  createdEmployees  Employee[] @relation("CreatedBy")

  visit Visit[]

  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
}

model User {
  username String @id
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String   @unique
}

model Department {
  id   String @id @default(uuid())
  name String @unique

  Employees Employee[]
}

model Visit {
  code           String       @id
  sequenceNumber Int?
  kinship        KinshipEnum?

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt

  creator Employee @relation(fields: [creatorId], references: [id])

  creatorId   String
  patient     Person?   @relation("visitPatient", fields: [patientId], references: [id])
  patientId   String?
  companion   Person?   @relation("visitCompanion", fields: [companionId], references: [id])
  companionId String?
  incident    Incident? @relation(fields: [incidentId], references: [id])
  incidentId  String?

  AdditionalInformation VisitAdditionalInformation? @relation(fields: [additionalInfoId], references: [id])
  additionalInfoId      String?
}

model Incident {
  id               String  @id @default(uuid())
  numberOfPatients Int
  isCompleted      Boolean @default(false)

  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  AdditionalInformation VisitAdditionalInformation? @relation(fields: [additionalInfoId], references: [id])
  additionalInfoId      String?

  visits                Visit[]
  CompanionsOnIncidents CompanionsOnIncidents[]
}

model CompanionsOnIncidents {
  companion   Person   @relation(fields: [companionId], references: [id])
  companionId String
  incident    Incident @relation(fields: [incidentId], references: [id])
  incidentId  String

  @@id([companionId, incidentId])
}

model CarNumber {
  id                         String                       @id @default(uuid())
  firstChar                  String                       @db.VarChar(1)
  secondChar                 String                       @db.VarChar(1)
  thirdChar                  String                       @db.VarChar(1)
  number                     Int
  VisitAdditionalInformation VisitAdditionalInformation[]

  @@unique([firstChar, secondChar, thirdChar, number], map: "Car_Unique")
}

model Attendant {
  id                         String                       @id @default(uuid())
  SSN                        String?                      @unique
  cardId                     String?                      @unique
  name                       String
  attendantRole              AttendantRole
  VisitAdditionalInformation VisitAdditionalInformation[]
}

model VisitAdditionalInformation {
  id             String           @id @default(uuid())
  Car            CarNumber?       @relation(fields: [carId], references: [id])
  carId          String?
  cameFrom       CameFromOptions?
  injuryLocation String?
  injuryCause    String?
  notes          String?
  Attendant      Attendant?       @relation(fields: [attendantId], references: [id])
  attendantId    String?
  Incident       Incident[]
  Visit          Visit[]
}

enum IdentityEnum {
  NATIONALIDCARD
  PASSPORT
}

enum GenderEnum {
  MALE
  FEMALE
}

enum KinshipEnum {
  BROTHER
  SISTER
  FATHER
  MOTHER
  COUSIN
  AUNT
  OTHER
}

enum RoleEnum {
  ADMIN
  EMPLOYEE
  DOCTOR
  NURSE
}

enum ShiftEnum {
  MORNING8
  AFTERNOON8
  NIGHT8
  MORNING12
  NIGHT12
  LONG
}

enum CameFromOptions {
  HOME
  ACCIDENT
  PRISONER
}

enum AttendantRole {
  PARAMEDIC
  OFFICER
}
