// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// Identity and Personal Information
// ================================
model Person {
  id                   String        @id @default(uuid())
  firstName            String?
  secondName           String?
  thirdName            String?
  fourthName           String?
  fullName             String?
  SSN                  String?       @unique
  verificationMethod   IdentityType? @relation(fields: [verificationMethodId], references: [id])
  verificationMethodId Int?
  gender               GenderType    @relation(fields: [genderId], references: [id])
  genderId             Int
  governate            Governate?    @relation(fields: [governateId], references: [id])
  governateId          Int?
  birthDate            DateTime?     @db.Date
  phone                String?       @unique
  address              String?

  employee  Employee?
  patient   Patient?
  companion Companion?
}

model IdentityType {
  id     Int      @id @default(autoincrement())
  value  String   @unique
  Person Person[]
}

model GenderType {
  id     Int      @id @default(autoincrement())
  value  String   @unique
  Person Person[]
}

model Governate {
  id     Int      @id @default(autoincrement())
  value  String   @unique
  Person Person[]
}

// ================================
// Authentication and Authorization
// ================================
model User {
  username String  @id
  password String
  email    String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String   @unique
}

model Employee {
  id      String    @id @default(uuid())
  role    RoleType  @relation(fields: [roleId], references: [id])
  roleId  Int
  shift   ShiftType @relation(fields: [shiftId], references: [id])
  shiftId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth User?

  person   Person @relation(fields: [personId], references: [id])
  personId String @unique

  createdByEmployee Employee?  @relation("CreatedBy", fields: [createdById], references: [id])
  createdById       String?
  createdEmployees  Employee[] @relation("CreatedBy")

  subdepartments               SubDepartment[] // Removed references argument
  visitsCreated                Visit[]
  diagnosis                    Diagnosis[]
  medicalProblem               MedicalProblem[]
  allergy                      Allergy[]
  medication                   Medication[]
  prescription                 Prescription[]
  consultationRequestsSent     ConsultationRequest[] @relation("requester")
  consultationRequestsReceived ConsultationRequest[] @relation("consultant")
  surgery                      Surgery[]
  vitals                       Vitals[]
  primarySurvey                PrimarySurvey[]
  Transfer                     Transfer[]
}

model RoleType {
  id          Int           @id @default(autoincrement())
  value       String        @unique
  Employee    Employee[]
  Permissions Permissions[]
}

model ShiftType {
  id       Int        @id @default(autoincrement())
  value    String     @unique
  Employee Employee[]
}

// ================================
// Medical Information
// ================================
model Patient {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  person   Person @relation(fields: [personId], references: [id])
  personId String @unique

  vitals              Vitals[]
  visits              Visit[]
  diagnosis           Diagnosis[]
  medicalProblems     MedicalProblem[]
  allergies           Allergy[]
  medications         Medication[]
  prescriptions       Prescription[]
  surgery             Surgery[]
  labTests            LabTest[]
  images              Image[]
  consultationRequest ConsultationRequest[]
  // Referral        Referral[]
}

model Companion {
  id        String       @id @default(uuid())
  kinship   KinshipType? @relation(fields: [kinshipId], references: [id])
  kinshipId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  person   Person @relation(fields: [personId], references: [id])
  personId String @unique

  visits                Visit[]
  CompanionsOnIncidents CompanionsOnIncidents[]
}

model Surgery {
  id          String  @id @default(uuid())
  name        String
  description String?
  place       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String
  visit     Visit    @relation(fields: [visitCode], references: [code])
  visitCode String
  author    Employee @relation(fields: [authorId], references: [id])
  authorId  String
}

model Diagnosis {
  id          String  @id @default(uuid())
  name        String?
  description String?
  icdCode     String?
  type        String? //(provisional,final) 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  visit     Visit    @relation(fields: [visitCode], references: [code])
  visitCode String
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String
  author    Employee @relation(fields: [authorId], references: [id])
  authorId  String
}

model MedicalProblem {
  id           String    @id @default(uuid())
  name         String
  beginDate    DateTime?
  endDate      DateTime?
  verification String?
  comments     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient     Patient  @relation(fields: [patientId], references: [id])
  patientId   String
  referedBy   Employee @relation(fields: [referedById], references: [id])
  referedById String
}

model Allergy {
  id           String    @id @default(uuid())
  name         String
  beginDate    DateTime?
  endDate      DateTime?
  reaction     String?
  severity     String?
  occurrence   String?
  verification String?
  comments     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient     Patient  @relation(fields: [patientId], references: [id])
  patientId   String
  referedBy   Employee @relation(fields: [referedById], references: [id])
  referedById String
}

model Medication {
  id                String    @id @default(uuid())
  drugName          String
  beginDate         DateTime
  endDate           DateTime?
  medicationUsage   String?
  dosageInstruction String?
  comments          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  referedBy   Employee @relation(fields: [referedById], references: [id])
  referedById String

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String
}

model Prescription {
  id                  String   @id @default(uuid())
  drugName            String
  beginDate           DateTime
  quantity            Int
  medicineUnit        String?
  dosage              String
  refills             String?
  substitutionAllowed Boolean
  notes               String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   Employee @relation(fields: [authorId], references: [id])
  authorId String

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String
  visit     Visit   @relation(fields: [visitCode], references: [code])
  visitCode String
}

model TriageAx {
  id                   String      @id @default(uuid())
  painScore            Float?
  consciousnessLevel   LOC?        @relation(fields: [consciousnessLevelId], references: [id])
  consciousnessLevelId Int?
  triage               TriageType? @relation(fields: [triageId], references: [id])
  triageId             Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  visit     Visit  @relation(fields: [visitCode], references: [code])
  visitCode String @unique
}

model Vitals {
  id     String @id @default(uuid())
  temp   Float?
  PR     Float?
  RR     Float?
  weight Float?
  height Float?
  SBP    Float?
  DBP    Float?
  SpO2   Float?
  CVP    Float?
  GCS    Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String
  visit     Visit    @relation(fields: [visitCode], references: [code])
  visitCode String
  author    Employee @relation(fields: [authorId], references: [id])
  authorId  String
}

model PrimarySurvey {
  id          String @id @default(uuid())
  airway      String
  breathing   String
  circulation String
  disability  String
  exposure    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  visit     Visit    @relation(fields: [visitCode], references: [code])
  visitCode String   @unique
  author    Employee @relation(fields: [authorId], references: [id])
  authorId  String
}

model Image {
  id   String  @id @default(uuid())
  name String
  url  String?

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String
  visit     Visit   @relation(fields: [visitCode], references: [code])
  visitCode String
}

model LabTest {
  id   String  @id @default(uuid())
  name String
  url  String?

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String
  visit     Visit   @relation(fields: [visitCode], references: [code])
  visitCode String
}

model ConsultationRequest {
  id                 String             @id @default(uuid())
  requestDate        DateTime           @default(now())
  status             ConsultationStatus @default(PENDING)
  notes              String?
  reason             String?
  clinicalData       String? //the requester filled this
  consultationReport String? //the consultant filled this
  recommendations    String? //the consultant filled this

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient      Patient  @relation(fields: [patientId], references: [id])
  patientId    String
  requester    Employee @relation("requester", fields: [requesterId], references: [id])
  requesterId  String
  consultant   Employee @relation("consultant", fields: [consultantId], references: [id])
  consultantId String
  visit        Visit?   @relation(fields: [visitId], references: [code])
  visitId      String?
}

model KinshipType {
  id        Int         @id @default(autoincrement())
  value     String      @unique
  Companion Companion[]
}

model TriageType {
  id       Int        @id @default(autoincrement())
  value    String     @unique
  triageAx TriageAx[]
}

model LOC {
  id       Int        @id @default(autoincrement())
  value    String     @unique
  triageAx TriageAx[]
}

enum ConsultationReason {
  OPINION_RECOMMENDATION_ONLY
  CO_MANAGEMENT
  TRANSFER_FOR_MANAGEMENT
}

enum ConsultationStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

// ================================
// Visit related models
// ================================
model Visit {
  code           String  @id
  sequenceNumber Int?
  mainComplaint  String?

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt

  AdditionalInformation VisitAdditionalInformation? @relation(fields: [additionalInfoId], references: [id])
  additionalInfoId      String?

  // Relations with Pesons
  creator     Employee   @relation(fields: [creatorId], references: [id])
  creatorId   String
  patient     Patient?   @relation(fields: [patientId], references: [id])
  patientId   String?
  companion   Companion? @relation(fields: [companionId], references: [id])
  companionId String?

  incident   Incident? @relation(fields: [incidentId], references: [id])
  incidentId String?

  status VisitStatus @default(CREATED)

  transfers           Transfer[]
  triageAx            TriageAx?
  vitals              Vitals[]
  diagnosis           Diagnosis[]
  primarySurveys      PrimarySurvey?
  surgeries           Surgery[]
  labTests            LabTest[]
  images              Image[]
  prescription        Prescription[]
  consultationRequest ConsultationRequest[]
}

model Incident {
  id               String  @id @default(uuid())
  numberOfPatients Int
  isCompleted      Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AdditionalInformation VisitAdditionalInformation? @relation(fields: [additionalInfoId], references: [id])
  additionalInfoId      String?

  visits                Visit[]
  CompanionsOnIncidents CompanionsOnIncidents[]
}

model CompanionsOnIncidents {
  companion   Companion @relation(fields: [companionId], references: [id])
  companionId String
  incident    Incident  @relation(fields: [incidentId], references: [id])
  incidentId  String

  @@id([companionId, incidentId])
}

model CarNumber {
  id                         String                       @id @default(uuid())
  firstChar                  String                       @db.VarChar(1)
  secondChar                 String                       @db.VarChar(1)
  thirdChar                  String                       @db.VarChar(1)
  number                     Int
  VisitAdditionalInformation VisitAdditionalInformation[]

  @@unique([firstChar, secondChar, thirdChar, number], map: "Car_Unique")
}

model Attendant {
  id                         String                       @id @default(uuid())
  SSN                        String?                      @unique
  cardId                     String?                      @unique
  name                       String
  attendantRole              AttendantRole                @relation(fields: [attendantRoleId], references: [id])
  attendantRoleId            Int
  VisitAdditionalInformation VisitAdditionalInformation[]
}

model VisitAdditionalInformation {
  id             String           @id @default(uuid())
  Car            CarNumber?       @relation(fields: [carId], references: [id])
  carId          String?
  cameFrom       CameFromOptions? @relation(fields: [cameFromId], references: [id])
  cameFromId     Int
  injuryLocation String?
  injuryCause    String?
  notes          String?
  Attendant      Attendant?       @relation(fields: [attendantId], references: [id])
  attendantId    String?
  Incident       Incident[]
  Visit          Visit[]
}

model Transfer {
  id String @id @default(uuid())

  fromSubDep   SubDepartment? @relation("fromSubDepartment", fields: [fromSubDepId], references: [id])
  fromSubDepId Int?
  toSubDep     SubDepartment  @relation("toSubDepartment", fields: [toSubDepId], references: [id])
  toSubDepId   Int

  transferDate DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  visit     Visit  @relation(fields: [visitCode], references: [code])
  visitCode String

  createdBy   Employee? @relation(fields: [createdById], references: [id])
  createdById String?
}

model CameFromOptions {
  id                         Int                          @id @default(autoincrement())
  value                      String                       @unique
  VisitAdditionalInformation VisitAdditionalInformation[]
}

model AttendantRole {
  id        Int         @id @default(autoincrement())
  value     String      @unique
  Attendant Attendant[]
}

// ================================
// Facilities and Infrastructure
// ================================
model Department {
  id   Int    @id @default(autoincrement())
  name String @unique

  SubDepartments SubDepartment[]
}

model SubDepartment {
  id               Int            @id @default(autoincrement())
  name             String         @unique
  roomId           Int
  room             Room           @relation(fields: [roomId], references: [id])
  specializationId Int
  specialization   Specialization @relation(fields: [specializationId], references: [id])

  transferFrom Transfer[]    @relation("fromSubDepartment")
  transferTo   Transfer[]    @relation("toSubDepartment")
  Department   Department?   @relation(fields: [departmentId], references: [id])
  departmentId Int?
  employees    Employee[] // Removed references argument
  Permissions  Permissions[]
}

model Specialization {
  id            Int             @id @default(autoincrement())
  name          String
  description   String?
  SubDepartment SubDepartment[]
}

model Room {
  id            Int             @id @default(autoincrement())
  name          String
  location      String?
  SubDepartment SubDepartment[]
}

model Feature {
  id          Int           @id @default(autoincrement())
  name        String
  code        String?
  Permissions Permissions[]
}

model Permissions {
  id              Int           @id @default(autoincrement())
  feature         Feature       @relation(fields: [featureId], references: [id])
  featureId       Int
  role            RoleType      @relation(fields: [roleTypeId], references: [id])
  roleTypeId      Int
  subDepartment   SubDepartment @relation(fields: [subDepartmentId], references: [id], onDelete: Cascade)
  subDepartmentId Int

  @@unique([featureId, roleTypeId, subDepartmentId], map: "FeatureRoleSubDepartment")
}

model Comorbidity {
  id    Int    @id @default(autoincrement())
  value String @unique
}

enum VisitStatus {
  CREATED
  BOOKED
  ARRIVED
  TRANSFERED
  EXAMINED
  ENDED
}

// model Referral {
//   id           String   @id @default(uuid())
//   patientId    String
//   referralDate DateTime @default(now())
//   reason       String
//   notes        String
//   status       String // Example values: "Pending", "Completed", "Cancelled"
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt

//   patient                   Patient       @relation(fields: [patientId], references: [id])
//   referringSubDepartment    SubDepartment @relation("ReferringSubDepartment", fields: [referringSubDepartmentId], references: [id])
//   referringSubDepartmentId  String
//   referredToSubDepartment   SubDepartment @relation("ReferredToSubDepartment", fields: [referredToSubDepartmentId], references: [id])
//   referredToSubDepartmentId String
// }
