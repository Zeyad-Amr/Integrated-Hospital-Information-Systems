// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id                 String       @id @default(uuid())
  firstName          String
  secondName         String
  thirdName          String
  fourthName         String
  SSN                String       @unique
  verificationMethod IdentityEnum
  gender             GenderEnum
  birthDate          DateTime
  phone              String?      @unique
  email              String?      @unique
  governate          String
  address            String
  Employee           Employee?
  Visits             Visit[]      @relation("visitPatient")
  visits             Visit[]      @relation("visitCompanion")
  createdAt          DateTime     @default(now())
  updatedAt          DateTime?
}

model Employee {
  id                String     @id @default(uuid())
  person            Person     @relation(fields: [personID], references: [id])
  personID          String     @unique
  User              User?
  createdByEmployee Employee?  @relation("CreatedBy", fields: [createdById], references: [id])
  createdById       String
  createdEmployees  Employee[] @relation("CreatedBy")
  // Visit             Visit[]
  shiftStart        DateTime
  shiftEnd          DateTime
  createdAt         DateTime   @default(now())
  updatedAt         DateTime?
}

model User {
  username   String   @id
  password   String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @unique
  createdAt  DateTime @default(now())

  updatedAt DateTime?
}

model Visit {
  id             String       @id @default(uuid())
  code           String?      @unique
  sequenceNumber Int
  kinship        KinshipEnum?
  // it has to be commented till the emplopyee api created
  // creator        Employee     @relation(fields: [creatorId], references: [id])
  creatorId      String?
  patient        Person?       @relation("visitPatient", fields: [patientId], references: [id])
  patientId      String?
  companion      Person?      @relation("visitCompanion", fields: [companionId], references: [id])
  companionId    String?
  incident       Incident?    @relation(fields: [incidentId], references: [id])
  incidentId     String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?
}

model Incident {
  id               String    @id @default(uuid())
  description      String
  numberOfPatients Int
  Visit            Visit[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime?
}

enum IdentityEnum {
  NATIONALIDCARD
  PASSPORT
}

enum GenderEnum {
  MALE
  FEMALE
}

enum KinshipEnum {
  BROTHER
  SISTER
  FATHER
  MOTHER
  COUSIN
  AUNT
  OTHER
}
